{"version":3,"file":"workbook.abstract.js","sourceRoot":"","sources":["../../src/abstracts/workbook.abstract.ts"],"names":[],"mappings":"","sourcesContent":["import * as Core from 'xmind-model';\n\nexport interface CreateSheetsOptions {\n  s: string;\n  t: string;\n}\n\nexport interface ResponseOfSheets {\n  id: string;\n  title: string;\n}\n\n\nexport interface AbstractWorkbook {\n\n  /**\n   * @description Create a instance of Sheet\n   * @param {String} sheetTitle\n   * @param {String} [centralTopicTitle]\n   */\n  createSheet(sheetTitle: string, centralTopicTitle: string): Core.Sheet;\n\n\n  /**\n   * To create sheet in batch mode\n   * @param {Object[{\n   *   s: string,\n   *   t: string\n   * }]} options\n   */\n  createSheets(options: CreateSheetsOptions[]): ResponseOfSheets[];\n\n  /**\n   * Get sheet back\n   * @param {String} id\n   */\n  getSheet(id: string): Core.Sheet;\n\n  /**\n   * Get all sheet information that you created\n   */\n  getSheets(): ResponseOfSheets[];\n\n  /**\n   * @description Set theme color\n   * @param {String} sheetTitle\n   * @param {String} themeName\n   */\n  theme(sheetTitle:string, themeName: string): boolean;\n\n  /**\n   * @description Formatting Mind-map data as String\n   * @return {String}\n   */\n  toString(): string;\n\n  /**\n   * @description Formatting Mind-map data as JSON\n   * @return {Object}\n   */\n  toJSON(): object;\n\n\n  /**\n   * @description Validate Mind-map data\n   * @return {status: boolean, errors: Array<object>} The `status` indicates result and you also can get errors\n   */\n  validate(): {status: boolean, errors: Array<object>};\n}\n"]}