"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Workbook = void 0;
const theme_1 = require("./theme");
const base_1 = require("./base");
const Core = require("xmind-model");
/**
 * @description The implementation of Workbook
 * @extends {Base}
 */
class Workbook extends base_1.default {
    constructor() {
        super();
        this.resources = {};
    }
    theme(sheetTitle, themeName) {
        /* istanbul ignore next */
        if (!sheetTitle || !this.resources[sheetTitle]) {
            return false;
        }
        /* istanbul ignore next */
        if (!themeName || typeof themeName !== 'string') {
            return false;
        }
        const instance = new theme_1.Theme({ themeName });
        this.sheet.changeTheme(instance.data);
        return true;
    }
    toString() {
        return this.workbook.toString();
    }
    toJSON() {
        return this.workbook.toJSON();
    }
    validate() {
        return Core.validator(this.workbook.toJSON());
    }
    getSheets() {
        return Object.entries(this.resources || {})
            .map(sheet => ({ id: sheet[1], title: sheet[0] }));
    }
    getSheet(id) {
        if (!id) {
            throw new Error('The sheetId is required');
        }
        return this.workbook.getSheetById(id);
    }
    createSheets(options = []) {
        if (options.length <= 0) {
            throw new Error('Options are empty');
        }
        const sheets = [];
        const created = [];
        for (let i = 0; i < options.length; i++) {
            if (this.resources.hasOwnProperty(options[i].s)) {
                continue;
            }
            const id = this.id;
            this.resources[options[i].s] = id;
            const sheetBody = { id, title: options[i].s };
            const rootTopic = { rootTopic: { id: this.id, title: options[i].t } };
            sheets.push(Object.assign({}, sheetBody, rootTopic));
            created.push(sheetBody);
        }
        this.workbook = new Core.Workbook(sheets);
        return created;
    }
    createSheet(sheetTitle, centralTopicTitle = 'Central Topic') {
        if (!sheetTitle) {
            throw new Error('The title of sheet is required');
        }
        if (this.resources.hasOwnProperty(sheetTitle)) {
            throw new Error('You are trying to create the sheet repeatedly that is not allowed');
        }
        const sheetId = this.id;
        this.resources[sheetTitle] = sheetId;
        const options = [{
                id: sheetId, title: sheetTitle,
                rootTopic: { id: this.id, title: centralTopicTitle }
            }];
        this.workbook = new Core.Workbook(options);
        this.sheet = this.workbook.getSheetById(sheetId);
        return this.sheet;
    }
}
exports.Workbook = Workbook;
//# sourceMappingURL=workbook.js.map