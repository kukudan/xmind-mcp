{"version":3,"file":"marker.js","sourceRoot":"","sources":["../../src/core/marker.ts"],"names":[],"mappings":";;;AAAA,kEAA8D;AAC9D,uDAA6D;AAE7D,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,kBAAkB,CAAC,CAAC;AAEnD,MAAM,CAAC,cAAc,CAAC,cAAK,EAAE,UAAU,EAAE;IACvC,KAAK,EAAE,iBAAQ;IACf,UAAU,EAAE,KAAK;IACjB,YAAY,EAAE,KAAK;IACnB,QAAQ,EAAE,KAAK;CAChB,CAAC,CAAC;AAGH,MAAa,MAAO,SAAQ,gCAAc;IACxC;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAEO,IAAI;QACV,KAAK,MAAM,QAAQ,IAAI,cAAK,EAAE;YAC5B,IAAI,CAAC,QAAQ,CAAC,GAAG,UAAS,IAAY;gBACpC,IAAI,CAAC,IAAI,EAAE;oBACT,OAAO,IAAI,CAAC;iBACb;gBACD,MAAM,UAAU,GAAG,CAAC,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACpE,IAAI,IAAI,IAAI,CAAC,cAAK,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE;oBACvD,KAAK,CAAC,4BAA4B,EAAE,IAAI,CAAC,CAAC;oBAC1C,OAAO,IAAI,CAAC;iBACb;gBACD,OAAO,cAAK,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC;YACrC,CAAC,CAAC;SACH;IACH,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,KAAK,CAAC,SAAiB;QAC5B,OAAO,cAAK,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;IAC9C,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,MAAM;QACX,OAAO,MAAM,CAAC,IAAI,CAAC,cAAK,CAAC,UAAU,CAAC,CAAC,CAAC;IACxC,CAAC;CACF;AAxCD,wBAwCC","sourcesContent":["import { AbstractMarker } from '../abstracts/marker.abstract';\nimport { icons, iterable } from '../common/constants/marker';\n\nconst debug = require('debug')('xmind-sdk:marker');\n\nObject.defineProperty(icons, 'iterable', {\n  value: iterable,\n  enumerable: false,\n  configurable: false,\n  writable: false\n});\n\n\nexport class Marker extends AbstractMarker {\n  constructor() {\n    super();\n    this.init();\n  }\n\n  private init() {\n    for (const property in icons) {\n      this[property] = function(name: string) {\n        if (!name) {\n          return null;\n        }\n        const normalized = (typeof name === 'string') ? name : String(name);\n        if (name && !icons[property].hasOwnProperty(normalized)) {\n          debug('W - Invalid name string %s', name);\n          return null;\n        }\n        return icons[property][normalized];\n      };\n    }\n  }\n\n  /**\n   * @description Get names by group name\n   * @param {String} groupName\n   * @return {Array<string>}\n   * @static\n   */\n  static names(groupName: string) {\n    return icons['iterable'][String(groupName)];\n  }\n\n  /**\n   * @description Get group names\n   * @return {Array<string>}\n   * @static\n   */\n  static groups() {\n    return Object.keys(icons['iterable']);\n  }\n}"]}