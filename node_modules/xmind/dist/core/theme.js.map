{"version":3,"file":"theme.js","sourceRoot":"","sources":["../../src/core/theme.ts"],"names":[],"mappings":";;;AAEA,MAAM,MAAM,GAAG,OAAO,CAAC,8BAA8B,CAAC,CAAC;AACvD,MAAM,SAAS,GAAG,OAAO,CAAC,iCAAiC,CAAC,CAAC;AAC7D,MAAM,QAAQ,GAAG,OAAO,CAAC,gCAAgC,CAAC,CAAC;AAE3D,MAAM,EAAE,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AAC9B,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,iBAAiB,CAAC,CAAC;AAClD,MAAM,cAAc,GAAG,CAAC,QAAQ,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;AAM3D,MAAM,MAAM,GAAG;IACb,MAAM,EAAE,MAAM;IACd,SAAS,EAAE,SAAS;IACpB,QAAQ,EAAE,QAAQ;CACnB,CAAC;AAEF;;GAEG;AACH,MAAa,KAAK;IAGhB,YAAY,UAAsC,EAAE;QAClD,MAAM,IAAI,GAAG,OAAO,CAAC,SAAS,CAAC;QAC/B,IAAI,CAAC,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ;YACnC,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,EAAE;YACpD,KAAK,CAAC,WAAW,EAAE,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,sBAAsB,CAAC,CAAC;YACtE,MAAM,IAAI,KAAK,CAAC,kBAAkB,IAAI,iBAAiB,CAAC,CAAC;SAC1D;QAED,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IAED,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAEO,MAAM,CAAC,IAAY;QACzB,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;QAC3B,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC;QAChB,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC;QACnB,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AAxBD,sBAwBC","sourcesContent":["import * as Model from '../common/model';\n\nconst Robust = require('../common/themes/robust.json');\nconst Snowbrush = require('../common/themes/snowbrush.json');\nconst Business = require('../common/themes/business.json');\n\nconst v4 = require('uuid/v4');\nconst debug = require('debug')('xmind-sdk:theme');\nconst ALLOWED_THEMES = ['robust', 'snowbrush', 'business'];\n\ninterface ThemeOptions {\n  themeName: string;\n}\n\nconst THEMES = {\n  robust: Robust,\n  snowbrush: Snowbrush,\n  business: Business,\n};\n\n/**\n * @description Invisible external\n */\nexport class Theme {\n  private readonly value: Model.Theme;\n\n  constructor(options: ThemeOptions = <ThemeOptions>{}) {\n    const name = options.themeName;\n    if (!name || typeof name !== 'string' ||\n      !ALLOWED_THEMES.includes(name.toLocaleLowerCase())) {\n      debug('W - Only ', ALLOWED_THEMES.join(', '), 'are allowed for now.');\n      throw new Error(`the theme name ${name} is not allowed`);\n    }\n\n    this.value = this.loader(name);\n  }\n\n  get data() {\n    return this.value;\n  }\n\n  private loader(name: string) {\n    const theme = THEMES[name];\n    theme.id = v4();\n    theme.title = name;\n    return theme;\n  }\n}\n"]}