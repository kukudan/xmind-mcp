"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Topic = void 0;
const summary_1 = require("./summary");
const note_1 = require("./note");
const common_1 = require("../utils/common");
const base_1 = require("./base");
/**
 * @description Topic common methods
 */
class Topic extends base_1.default {
    constructor(options = {}) {
        super({ debug: 'xmind-sdk:topic' });
        if (options && !options.sheet) {
            throw new Error('options.sheet is required');
        }
        this.sheet = options.sheet;
        this.root = this.sheet.getRootTopic();
        this.parentId = this.lastId = this.root.getId();
        this.setRoot({ id: this.parentId, title: 'Central Topic' });
    }
    on(componentId) {
        if (!componentId) {
            this.parentId = this.root.getId();
            return this;
        }
        if (!this.isValidComponentId(String(componentId))) {
            throw new Error(`Invalid componentId ${String(componentId)}`);
        }
        this.parentId = componentId;
        return this;
    }
    addLabel(text) {
        const p = this.parent();
        const labels = p.getLabels();
        const options = { index: 0 };
        if (!labels || labels.length === 0) {
            options.index = 0;
        }
        else {
            options.index = labels.length;
        }
        p.addLabel(text, options);
        return this;
    }
    removeLabel(componentId) {
        const p = componentId ? this.find(componentId) : this.parent();
        if (!p) {
            throw new Error(`does not found component: ${componentId}`);
        }
        p.removeLabels();
        return this;
    }
    add(topic = {}, options) {
        if (!common_1.isString(topic.title)) {
            throw new Error('topic.title should be a valid string');
        }
        topic.id = topic.id || this.id;
        this.parent().addChildTopic(topic, options);
        this.addChildNode({
            id: topic.id, title: topic.title,
            customId: topic.customId || null,
            parentId: topic.parentId || this.parentId
        });
        this.lastId = topic.id;
        return this;
    }
    image(options) {
        const dir = `resources/${this.id}`;
        const params = Object.assign({}, { src: `xap:${dir}` }, options || {});
        this.parent().addImage(params);
        return dir;
    }
    note(text, del) {
        const p = this.parent();
        if (del === true) {
            p.removeNotes();
            return this;
        }
        if (!text)
            return this;
        const n = new note_1.Note();
        n.text = text;
        p.addNotes(n.toJSON());
        return this;
    }
    destroy(componentId) {
        if (!this.isValidComponentId(componentId)) {
            this.debug('E - target: "%s" does not exist', componentId);
            return this;
        }
        try {
            const topic = this.find(componentId);
            topic.parent().removeChildTopic(topic);
            this.destroyNode({ id: componentId });
        }
        catch (e) {
            /* istanbul ignore next */
            this.debug('D - %s', e.message);
        }
        return this;
    }
    summary(options = {}) {
        if (this.parent().isRootTopic()) {
            this.debug('I - Not allowed add summary on root topic.');
            return this;
        }
        let edge = null;
        if (options.edge) {
            if (this.exist(options.edge)) {
                edge = options.edge;
            }
            else {
                this.debug('W - Topic "%s" does not exist', options.edge);
            }
        }
        const summary = new summary_1.Summary();
        const type = this.parent().getType();
        const grandfather = this.grandfather();
        const children = grandfather.getChildrenByType(type);
        const condition = [this.parentId, !edge ? this.parentId : edge];
        summary.range({ children, condition });
        const summaryOptions = { title: options.title || 'Summary', id: this.id };
        summary.topicId = summaryOptions.id;
        grandfather.addSummary(summary.toJSON(), summaryOptions);
        this.addChildNode({
            id: summaryOptions.id, title: summaryOptions.title,
            parentId: this.parentId
        });
        this.lastId = summaryOptions.id;
        return this;
    }
    marker(options = {}) {
        if (!common_1.isObject(options) || common_1.isEmpty(options) ||
            !options['groupId'] || !options['markerId']) {
            this.debug('E - Invalid marker options: %j', options);
            return this;
        }
        if (options.del === true) {
            delete options.del;
            this.parent().removeMarker(options);
            return this;
        }
        this.parent().addMarker(options);
        return this;
    }
    cid(title, dependencies = {}) {
        const validTitle = common_1.isString(title);
        if (validTitle && dependencies) {
            if (dependencies.parentId) {
                return this.getConflictedComponentId({
                    title, parentId: dependencies.parentId
                });
            }
            if (dependencies.customId) {
                return this.getConflictedComponentId({
                    title, customId: dependencies.customId
                });
            }
        }
        if (validTitle) {
            return this.findComponentIdBy(title);
        }
        return this.lastId;
    }
    cids() {
        return this.all();
    }
    find(componentId = null) {
        const rootId = this.root.getId();
        if (!componentId || componentId === rootId) {
            return this.root;
        }
        return this.sheet.findComponentById(componentId);
    }
    grandfather() {
        return this.parent().parent();
    }
    parent() {
        return this.parentId === this.root.getId() ?
            this.root :
            this.sheet.findComponentById(this.parentId);
    }
    get rootTopic() {
        /* istanbul ignore next */
        return this.root;
    }
    get rootTopicId() {
        return this.root.getId();
    }
}
exports.Topic = Topic;
//# sourceMappingURL=topic.js.map