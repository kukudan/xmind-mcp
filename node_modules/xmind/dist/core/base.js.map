{"version":3,"file":"base.js","sourceRoot":"","sources":["../../src/core/base.ts"],"names":[],"mappings":"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","sourcesContent":["import * as TreeModel from 'tree-model';\nimport { Node } from 'tree-model';\n\nimport { isString } from '../utils/common';\n\nconst v4 = require('uuid/v4');\nconst Debug = require('debug');\n\nexport interface BaseOptions {\n  debug?: string;\n  instance?: any;\n}\n\nexport interface TreeNodeOptions {\n  id: string;\n  title: string;\n  customId?: number | string | null;\n  parentId?: number | string | null;\n}\n\nexport interface ConflictedOnDifferentBranchOptions extends Pick<TreeNodeOptions, 'title' | 'parentId'> {}\n\nexport interface ConflictedOnSameBranchOptions extends Pick<TreeNodeOptions, 'title' | 'customId'> {}\n\nconst DEFAULT_DEBUG_SCOPE = 'xmind-sdk';\n\nexport default class Base {\n  private readonly _debug;\n\n  protected tree = new TreeModel();\n\n  protected rootNode: Node<TreeNodeOptions>;\n\n  /* istanbul ignore next */\n  constructor(protected options: BaseOptions = <BaseOptions>{}) {\n    this.options = options;\n    this._debug = Debug(this.options.debug || DEFAULT_DEBUG_SCOPE);\n  }\n\n  protected isValidComponentId(componentId: string): boolean {\n    if (!componentId || typeof componentId !== 'string') {\n      return false;\n    }\n    const node = this.rootNode.first((node: Node<TreeNodeOptions>) => node.model.id === componentId);\n    return !!node;\n  }\n\n  protected setRoot(options: TreeNodeOptions) {\n    this.rootNode = this.tree.parse(Object.assign(options, { children: [] }));\n    return this;\n  }\n\n  protected destroyNode(options: Pick<TreeNodeOptions, 'id'>): boolean {\n    const node = this.rootNode.first((node: Node<TreeNodeOptions>) => {\n      return node.model.id === options.id;\n    });\n    node.drop();\n    return true;\n  }\n\n  protected addChildNode(options: TreeNodeOptions) {\n    const node = this.rootNode.first((node: Node<TreeNodeOptions>) => {\n      return node.model.id === options.parentId;\n    });\n    node.addChild(this.tree.parse(options));\n  }\n\n  protected exist(componentId: string): boolean {\n    const n = this.rootNode.first((node: Node<TreeNodeOptions>) => {\n      return node.model.id === componentId;\n    });\n    return !!n;\n\n  }\n\n  protected findComponentIdBy(title: string): string | null {\n    const n = this.rootNode.first((node: Node<TreeNodeOptions>) => {\n      return node.model.title === title;\n    });\n    if (!n) return null;\n    return n.model.id;\n  }\n\n  protected all() {\n    const nodes = this.rootNode.all(() => true);\n    const map = {};\n    nodes.forEach(node => {\n      map[String(node.model.id)] = node.model.title;\n    });\n    return map;\n  }\n\n  /**\n   *\n   * @param { ConflictedOnDifferentBranchOptions | ConflictedOnSameBranchOptions } options\n   * @return { String | Null }\n   */\n  protected getConflictedComponentId(\n    options: ConflictedOnDifferentBranchOptions & ConflictedOnSameBranchOptions\n  ): string | null {\n    const validString = isString(options.title);\n    if (validString && options.parentId) {\n      return this.different(options);\n    }\n\n    if (validString && options.customId) {\n      return this.identical(options);\n    }\n\n    return null;\n  }\n\n  /**\n   * @description Print debug information\n   * @param {Array} args - the rest arguments\n   */\n  public debug(...args) {\n    this._debug(...args);\n  }\n\n  /**\n   * @description uuid/v4\n   */\n  get id(): string {\n    return v4();\n  }\n\n  private different(options: ConflictedOnDifferentBranchOptions): string | null {\n    const finder = (node: Node<TreeNodeOptions>) => {\n      return node.model.title === options.title;\n    };\n    for (const node of this.rootNode.all(finder)) {\n      if (node.parent.model.id === options.parentId) {\n        return node.model.id;\n      }\n    }\n\n    return null;\n  }\n\n  private identical(options: ConflictedOnSameBranchOptions) {\n    const finder = (node: Node<TreeNodeOptions>) => {\n      return node.model.title === options.title &&\n        node.model.customId === options.customId;\n    };\n\n    const nodes = this.rootNode.all(finder);\n    if (nodes.length <= 0) {\n      return null;\n    }\n\n    return nodes[0].model.id;\n  }\n}\n"]}