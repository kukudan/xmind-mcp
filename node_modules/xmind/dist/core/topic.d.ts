import { AbstractTopic, TopicOptions, MarkerOptions, ImageOptions } from '../abstracts/topic.abstract';
import { SummaryOptions } from '../abstracts/summary.abstract';
import * as Model from '../common/model';
import * as Core from 'xmind-model';
import Base from './base';
/**
 * @description Topic common methods
 */
export declare class Topic extends Base implements AbstractTopic {
    private readonly sheet;
    private readonly root;
    private parentId;
    private lastId;
    constructor(options?: TopicOptions);
    on(componentId?: string): Topic;
    addLabel(text: string): Topic;
    removeLabel(componentId?: string): Topic;
    add(topic?: Model.Topic & {
        customId?: string | number;
        parentId?: string;
    }, options?: {
        index: number;
    }): Topic;
    image(options?: ImageOptions): string;
    note(text: string, del?: boolean): Topic;
    destroy(componentId: string): Topic;
    summary(options?: SummaryOptions): Topic;
    marker(options?: MarkerOptions): Topic;
    cid(title?: string, dependencies?: {
        parentId?: number | string;
        customId?: number | string;
    }): string | null;
    cids(): Record<string, string>;
    find(componentId?: string): any;
    private grandfather;
    private parent;
    get rootTopic(): Core.Topic;
    get rootTopicId(): any;
}
