{"version":3,"file":"zipper.js","sourceRoot":"","sources":["../../src/utils/zipper.ts"],"names":[],"mappings":"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","sourcesContent":["import * as JSZip from 'jszip';\nimport Base from '../core/base';\nimport { Workbook } from '../core/workbook';\nimport { isObject } from './common';\nimport { PACKAGE_MAP } from '../common/constants';\n\nconst path = require('path');\nconst fs = require('fs');\nconst { promisify } = require('util');\nconst iconv = require('iconv-lite');\n\n/* istanbul ignore next */\nconst join = (process.platform === 'win32' ? path.win32.join : path.join);\n\nconst SUFFIX = '.xmind';\nconst DEFAULT_FILENAME = `default${SUFFIX}`;\n\ninterface ZipperOptions {\n  path: string;\n  workbook: Workbook;\n  filename?: string;\n}\n\n/**\n * @description Zipper for .xmind file\n */\nexport class Zipper extends Base {\n  public zip: JSZip;\n  public manifest: any;\n\n  public filename: string;\n  public path: string;\n  public workbook: Workbook;\n\n  constructor(options: ZipperOptions) {\n    super({debug: 'xmind-sdk:zipper'});\n    if (!options.path || !fs.existsSync(options.path)) {\n      this.debug('received %s', options.path);\n      throw new Error('the `path` is required or must exists');\n    }\n    this.filename = options.filename || DEFAULT_FILENAME;\n    this.filename = this.filename.endsWith(SUFFIX) ? this.filename : `${this.filename}${SUFFIX}`;\n    this.path = options.path;\n    this.zip = new JSZip();\n    this.workbook = options.workbook || null;\n    this.manifest = {\n      'file-entries': {'content.json': {}, 'metadata.json':{}}\n    };\n  }\n\n  public target() {\n    return join(this.path, this.filename);\n  }\n\n  /**\n   * @description Saving zip file\n   * @return { Promise }\n   */\n  public async save() {\n    if (this.workbook) {\n      this.addJSONContent(this.workbook.toString());\n      this.addMetadataContents();\n      this.addXMLContent();\n      this.addManifestContents();\n    }\n\n    const options: JSZip.JSZipGeneratorOptions = {\n      type: 'nodebuffer',\n      compression: 'STORE',\n      compressionOptions: { level: 9 }\n    };\n\n    const metadata = await this.zip.generateAsync(options);\n    const target = join(this.path, this.filename);\n    return promisify(fs.writeFile)(target, metadata)\n      .then(() => true)\n      .catch(/* istanbul ignore next */ () => false);\n  }\n\n  /**\n   * @description Update manifest metadata\n   * @param { String } key - a string key\n   * @param { Buffer } content - file contents\n   * @return { Zipper }\n   */\n  public updateManifestMetadata(key: string, content: Buffer) {\n    if (!key) return this;\n    if (!content || !Buffer.isBuffer(content)) {\n      return this;\n    }\n    const arr = key.split('/');\n    this.manifest['file-entries'][key] = {};\n    this.zip.folder(arr[0]).file(arr[1], content, { binary: false });\n    return this;\n  }\n\n  /**\n   * @description add contents to metadata.json file\n   *\n   */\n  private addMetadataContents() {\n    this.zip.file(PACKAGE_MAP.METADATA.NAME, '{}');\n    return this;\n  }\n\n  /**\n   * @description add contents to manifest.json\n   */\n  private addManifestContents() {\n    this.zip.file(PACKAGE_MAP.MANIFEST.NAME, JSON.stringify(this.manifest));\n    return this;\n  }\n\n  /**\n   * @description add contents to content.json\n   */\n  private addJSONContent(contents: string) {\n    if (isObject(contents)) {\n      contents = JSON.stringify(contents);\n    }\n    this.zip.file(PACKAGE_MAP.CONTENT_JSON.NAME, iconv.decode(Buffer.from(contents), 'utf8'));\n    return this;\n  }\n\n  /**\n   * @description add contents to content.xml\n   */\n  private addXMLContent() {\n    const p = join(__dirname, '../common/templates/content.xml');\n    this.zip.file(PACKAGE_MAP.CONTENT_XML.NAME, iconv.decode(fs.readFileSync(p), 'utf8'));\n    return this;\n  }\n}\n\n"]}