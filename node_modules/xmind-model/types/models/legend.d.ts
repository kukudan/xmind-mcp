import BaseComponent from './base-component';
import { Point } from '../common/utils';
import Sheet from './sheet';
import { MarkerData } from './marker';
export interface LegendData {
    visibility: "hidden" | "visible";
    position: Point;
    markers: {
        [id: string]: {
            name: string;
            resource?: string;
        };
    };
    groups: {
        [id: string]: {
            name: string;
            markers: Array<string>;
        };
    };
}
export default class Legend extends BaseComponent<LegendData> {
    componentType: string;
    modelEvents: {
        legendAddMarker: string;
        legendRemoveMarker: string;
        legendMarkerDescChanged: string;
    };
    private _liveMarkerMap;
    init(sheet: Sheet): void;
    getLiveMarkerMap(): {};
    _initEventsListener(): void;
    _onTopicAddMarker(markerData: MarkerData): void;
    _onTopicChangeMarker(markerData: MarkerData): void;
    _onTopicRemoveMarker(markerData: MarkerData): void;
    isVisible(): boolean;
    setVisible(isVisible: boolean): void;
    setLegendDisplay(isVisible: boolean): void;
    getPosition(): Point;
    setPosition(position: Point): void;
    setLegendPosition(position: Point): void;
    getUserMarkerDescription(): any;
    setUserMarkerDescription(markerId: string, userDescription: string): void;
}
