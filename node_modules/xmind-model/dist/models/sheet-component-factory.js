"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../common/constants");
const boundary_1 = require("./boundary");
const legend_1 = require("./legend");
const marker_1 = require("./marker");
const notes_1 = require("./notes");
const numbering_1 = require("./numbering");
const relationship_1 = require("./relationship");
const topic_extension_1 = require("./topic-extension");
const style_1 = require("./style");
const summary_1 = require("./summary");
const theme_1 = require("./theme");
const topic_1 = require("./topic");
const topic_image_1 = require("./topic-image");
const supportedComponents = {
    [constants_1.COMPONENT_TYPE.LEGEND]: legend_1.default,
    [constants_1.COMPONENT_TYPE.THEME]: theme_1.default,
    [constants_1.COMPONENT_TYPE.BOUNDARY]: boundary_1.default,
    [constants_1.COMPONENT_TYPE.RELATIONSHIP]: relationship_1.default,
    [constants_1.COMPONENT_TYPE.TOPIC]: topic_1.default,
    [constants_1.COMPONENT_TYPE.STYLE]: style_1.default,
    [constants_1.COMPONENT_TYPE.SUMMARY]: summary_1.default,
    [constants_1.COMPONENT_TYPE.IMAGE]: topic_image_1.default,
    [constants_1.COMPONENT_TYPE.MARKER]: marker_1.default,
    [constants_1.COMPONENT_TYPE.NOTE]: notes_1.default,
    [constants_1.COMPONENT_TYPE.NUMBERING]: numbering_1.default,
    [constants_1.COMPONENT_TYPE.EXTENSION]: topic_extension_1.default
};
const needIdTypeList = [
    constants_1.COMPONENT_TYPE.THEME, constants_1.COMPONENT_TYPE.TOPIC, constants_1.COMPONENT_TYPE.BOUNDARY,
    constants_1.COMPONENT_TYPE.SUMMARY, constants_1.COMPONENT_TYPE.RELATIONSHIP, constants_1.COMPONENT_TYPE.STYLE
];
const dataChecker = (sheet, componentType, data, options = {}) => {
    if (!data.id && needIdTypeList.includes(componentType)) {
        data.id = sheet.generateComponentId();
    }
    if (componentType === constants_1.COMPONENT_TYPE.SUMMARY) {
        if (!data.topicId) {
            data.topicId = sheet.generateComponentId();
        }
    }
    return true;
};
function createComponent(sheet, componentType, data, options = {}) {
    if (!dataChecker(sheet, componentType, data, options)) {
        throw new Error(`${componentType} data check error!`);
    }
    const SheetComponent = supportedComponents[componentType];
    if (!SheetComponent) {
        throw new Error(`${componentType} is not supported.`);
    }
    const sheetComponent = new SheetComponent(data, options);
    sheetComponent.init(sheet);
    return sheetComponent;
}
exports.default = createComponent;
//# sourceMappingURL=sheet-component-factory.js.map