"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const utils_1 = require("../common/utils");
class BaseModel extends events_1.EventEmitter {
    constructor(data, options = {}) {
        super();
        this._initData = data;
        this._data = new DataWrapper(data);
        this._options = options;
    }
    toString() {
        return this._data.toString();
    }
    toJSON() {
        return this._data.toJSON();
    }
    getId() {
        return this._data.commit('get', 'id');
    }
    remove(key) {
        if (!key)
            return this.reset();
        this._data.commit('delete', key);
    }
    reset() {
        this._data = null;
        this._data = new DataWrapper(this._initData);
        this.removeAllListeners();
    }
    get(key) {
        return this._data.commit('get', key);
    }
    set(key, value) {
        this._data.commit('set', key, value);
    }
}
exports.default = BaseModel;
///
/// DataWrapper
///
const privateData = new WeakMap();
class DataWrapper {
    constructor(data) {
        this._committing = false;
        this.get = this._commitWrapper(key => {
            const { obj, key: newKey } = this._getWrappedParentForKey(key);
            return obj[newKey];
        });
        this.set = this._commitWrapper((key, value) => {
            const { obj, key: newKey } = this._getWrappedParentForKey(key);
            obj[newKey] = value;
        });
        this.delete = this._commitWrapper(key => {
            const { obj, key: newKey } = this._getWrappedParentForKey(key);
            delete obj[newKey];
        });
        this.keys = this._commitWrapper(key => {
            const data = privateData.get(this);
            return Object.keys(data);
        });
        privateData.set(this, data);
    }
    _checkCommittingState() {
        if (!this._committing) {
            if (process.env.NODE_ENV === 'development') {
                throw new Error(`Guy, don't invoke method 'get | set | delete' of DataWrapper directly. MUST invoke 'commit' method instead.`);
            }
        }
    }
    _getWrappedParentForKey(key) {
        const data = privateData.get(this);
        if (utils_1.isString(key)) {
            return {
                obj: data,
                key: key
            };
        }
        else if (utils_1.isArray(key)) {
            let result = data;
            for (let i = 0; i < key.length - 1; i++) {
                if (!utils_1.isUndefined(result)) {
                    result = result[key[i]];
                }
                else {
                    return {
                        obj: {},
                        key: key[i]
                    };
                }
            }
            return {
                obj: result,
                key: key[key.length - 1]
            };
        }
    }
    toString() {
        const data = privateData.get(this);
        return JSON.stringify(data);
    }
    getOriginalData() {
        return privateData.get(this);
    }
    toJSON() {
        return JSON.parse(JSON.stringify(this.getOriginalData()));
    }
    _commitWrapper(operation) {
        return (key, value) => {
            this._checkCommittingState();
            if (typeof operation === 'function') {
                return operation.call(this, key, value);
            }
        };
    }
    commit(type, key, value) {
        let result;
        const committing = this._committing;
        this._committing = true;
        const operation = this[type];
        if (typeof operation === 'function') {
            result = operation.call(this, key, value);
        }
        this._committing = committing;
        return result;
    }
}
//# sourceMappingURL=base-model.js.map