"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../common/constants/index");
const base_component_1 = require("./base-component");
const utils_1 = require("../common/utils");
const GET = 'get';
const SET = 'set';
const DELETE = 'delete';
const KEYS = 'keys';
const EVENT_THEME_CLASS = 'changeThemeClass';
class Theme extends base_component_1.default {
    constructor() {
        super(...arguments);
        this.componentType = index_1.COMPONENT_TYPE.THEME;
    }
    init(sheet) {
        super.init(sheet);
        const classNames = this.getAllClassNames();
        classNames.forEach(className => {
            const styleData = this._data.commit(GET, className);
            this._properties[className] = this.ownerSheet().createComponent(index_1.COMPONENT_TYPE.STYLE, styleData);
            this._properties[className].parent(this);
        });
    }
    hasClass(className) {
        return !!this._properties[className];
    }
    getStyle(className) {
        return this._properties[className];
    }
    getTitle() {
        return this._data.commit('get', 'title');
    }
    changeTitle(title) {
        return this._data.commit('set', 'title', title);
    }
    getStyleValue(className, styleKey) {
        const style = this._properties[className];
        return style && style.getValue(styleKey);
    }
    getAllClassNames() {
        return this._data.commit(KEYS).filter(item => {
            item !== 'id' || item !== 'title';
        });
    }
    changeClass(className, styleData) {
        if (!utils_1.isDef(styleData)) {
            delete this._properties[className];
            this._data.commit(DELETE, className);
            this.triggerModelChanged(EVENT_THEME_CLASS);
            return;
        }
        const data = JSON.parse(JSON.stringify(styleData));
        const newStyle = this.ownerSheet().createComponent(index_1.COMPONENT_TYPE.STYLE, data);
        const oldStyleData = this._properties[className] ? this._properties[className].toJSON() : null;
        this._properties[className] = newStyle;
        this._properties[className].parent(this);
        this._data.commit(SET, className, data);
        this.triggerModelChanged(EVENT_THEME_CLASS);
        this.getUndo().add({
            undo: () => this.changeClass(className, oldStyleData),
            redo: () => this.changeClass(className, styleData)
        });
    }
}
exports.default = Theme;
//# sourceMappingURL=theme.js.map