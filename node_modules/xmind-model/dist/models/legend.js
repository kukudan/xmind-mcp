"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../common/constants");
const base_component_1 = require("./base-component");
const DATA_KEY_VISIBILITY = 'visibility';
const DATA_KEY_POSITION = 'position';
const DATA_KEY_USER_MARKERS = 'markers';
class Legend extends base_component_1.default {
    constructor() {
        super(...arguments);
        this.componentType = constants_1.COMPONENT_TYPE.LEGEND;
        this.modelEvents = {
            legendAddMarker: 'legendAddMarker',
            legendRemoveMarker: 'legendRemoveMarker',
            legendMarkerDescChanged: 'legendMarkerDescChanged'
        };
        this._liveMarkerMap = {};
    }
    init(sheet) {
        super.init(sheet);
        this._initEventsListener();
    }
    getLiveMarkerMap() {
        return Object.assign({}, this._liveMarkerMap);
    }
    _initEventsListener() {
        const parentSheetModel = this.ownerSheet();
        const sheetModelEvents = parentSheetModel.modelEvents;
        parentSheetModel.on(sheetModelEvents.topicAddMarker, this._onTopicAddMarker.bind(this));
        // todo
        parentSheetModel.on(sheetModelEvents.topicChangeMarker, this._onTopicChangeMarker.bind(this));
        parentSheetModel.on(sheetModelEvents.topicRemoveMarker, this._onTopicRemoveMarker.bind(this));
    }
    _onTopicAddMarker(markerData) {
        const liveMarkerMap = this._liveMarkerMap;
        const markerId = markerData.markerId;
        // if the added marker is not in the liveMarkerList
        // it's a new marker
        if (!liveMarkerMap[markerId]) {
            liveMarkerMap[markerId] = 1;
            this.emit(this.modelEvents.legendAddMarker, markerId);
        }
        else {
            liveMarkerMap[markerId]++;
        }
    }
    _onTopicChangeMarker(markerData) {
    }
    _onTopicRemoveMarker(markerData) {
        const liveMarkerMap = this._liveMarkerMap;
        const markerId = markerData.markerId;
        // Marker - 1
        if (!(--liveMarkerMap[markerId])) {
            delete liveMarkerMap[markerId];
            this.emit(this.modelEvents.legendRemoveMarker, markerId);
        }
    }
    isVisible() {
        return this._data.commit("get", DATA_KEY_VISIBILITY) === 'visible';
    }
    setVisible(isVisible) {
        this._data.commit("set", DATA_KEY_VISIBILITY, isVisible ? 'visible' : 'hidden');
        this.getUndo().add({
            undo: () => this.setLegendDisplay(!isVisible),
            redo: () => this.setLegendDisplay(isVisible)
        });
    }
    setLegendDisplay(isVisible) {
        return this.setVisible(isVisible);
    }
    getPosition() {
        return this._data.commit("get", DATA_KEY_POSITION);
    }
    setPosition(position) {
        const oldPosition = this._data.commit("get", DATA_KEY_POSITION);
        if (!position) {
            this._data.commit("delete", DATA_KEY_POSITION);
        }
        else {
            this._data.commit("set", DATA_KEY_POSITION, position);
        }
        this.getUndo().add({
            undo: () => this.setLegendPosition(oldPosition),
            redo: () => this.setLegendPosition(position)
        });
    }
    setLegendPosition(position) {
        return this.setPosition(position);
    }
    getUserMarkerDescription() {
        return JSON.parse(JSON.stringify(this._data.commit("get", DATA_KEY_USER_MARKERS)));
    }
    setUserMarkerDescription(markerId, userDescription) {
        const userMarkerDescriptionMap = JSON.parse(JSON.stringify(this._data.commit("get", DATA_KEY_USER_MARKERS) || {}));
        const oldUserDescription = (userMarkerDescriptionMap[markerId] || {}).name;
        if (!userDescription) {
            delete userMarkerDescriptionMap[markerId];
        }
        else {
            userMarkerDescriptionMap[markerId] = { name: userDescription };
        }
        this._data.commit("set", DATA_KEY_USER_MARKERS, userMarkerDescriptionMap);
        this.emit(this.modelEvents.legendMarkerDescChanged);
        this.getUndo().add({
            undo: () => this.setUserMarkerDescription(markerId, oldUserDescription),
            redo: () => this.setUserMarkerDescription(markerId, userDescription)
        });
    }
}
exports.default = Legend;
//# sourceMappingURL=legend.js.map