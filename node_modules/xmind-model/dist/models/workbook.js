"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../common/constants");
const undo_1 = require("../common/undo");
const config_1 = require("../common/config");
const utils_1 = require("../common/utils");
const sheet_1 = require("./sheet");
const base_component_1 = require("./base-component");
class Workbook extends base_component_1.default {
    constructor(data, options = {}) {
        super(data, options);
        this.componentType = constants_1.COMPONENT_TYPE.WORKBOOK;
        this._sheets = [];
        this._config = new config_1.Config();
        this._initUndo();
        // sheets
        this._initSheets();
    }
    _initUndo() {
        this._undoManager = new undo_1.default();
        this._undoManager.setStackLimitedLength(Infinity);
        this._undoManager.on(constants_1.EVENTS.UNDO_STATE_CHANGE, (...params) => this.emit(constants_1.EVENTS.UNDO_STATE_CHANGE, ...params));
    }
    _initSheets() {
        const sheetDataList = this._data.getOriginalData();
        sheetDataList.forEach(sheetData => {
            const newSheet = new sheet_1.default(sheetData, { undo: this._undoManager });
            newSheet.parent(this);
            this._sheets.push(newSheet);
            this._listenSheetModel(newSheet, sheetData.id);
        });
    }
    _listenSheetModel(sheet, id) {
        if (!sheet) {
            return;
        }
        sheet.on(constants_1.EVENTS.AFTER_SHEET_CONTENT_CHANGE, () => {
            this.emit(constants_1.EVENTS.AFTER_WORKBOOK_CONTENT_CHANGE);
        });
    }
    addSheet(sheetData, options = {}) {
        const sheetIndex = this._sheets.findIndex(sheet => sheet.getId() === sheetData.id);
        const sheetModel = new sheet_1.default(sheetData, { undo: this._undoManager });
        sheetModel.parent(this);
        this._listenSheetModel(sheetModel, sheetData.id);
        if (sheetIndex > 0) {
            this._config.get(constants_1.CONFIG.LOGGER).info(sheetData.id);
            this._config.get(constants_1.CONFIG.LOGGER).warn("try to add an existing sheet");
            this._sheets[sheetIndex] = sheetModel;
        }
        else {
            const at = options.at || this._sheets.length;
            const info = { sheetModel, at };
            this.emit(constants_1.EVENTS.BEFORE_ADD_NEW_SHEET, sheetData, info);
            const sheetDataList = this._data.getOriginalData();
            sheetDataList.splice(at, 0, sheetData);
            this._sheets.splice(at, 0, sheetModel);
            this.emit(constants_1.EVENTS.AFTER_ADD_NEW_SHEET, sheetData, info);
        }
        this.getUndo().add({
            undo: () => this.removeSheet(sheetData.id),
            redo: () => this.addSheet(sheetData)
        });
        return sheetModel;
    }
    removeSheet(sheetId) {
        const sheet = this.getSheetById(sheetId);
        if (!sheet) {
            return;
        }
        this.emit(constants_1.EVENTS.BEFORE_REMOVE_SHEET_MODEL, sheetId);
        const index = this._sheets.indexOf(sheet);
        const oldSheetData = sheet.toJSON();
        const sheetsData = this._data.getOriginalData();
        sheetsData.splice(index, 1);
        this._sheets.splice(index, 1);
        sheet.remove();
        this.emit(constants_1.EVENTS.AFTER_REMOVE_SHEET_MODEL, sheetId);
        this.getUndo().add({
            undo: () => this.addSheet(oldSheetData),
            redo: () => this.removeSheet(sheetId)
        });
        this.emit(constants_1.EVENTS.AFTER_WORKBOOK_CONTENT_CHANGE);
    }
    moveSheetTo(sheetId, to) {
        const sheet = this.getSheetById(sheetId);
        if (!sheet) {
            return;
        }
        const index = this._sheets.indexOf(sheet);
        const sheetsData = this._data.getOriginalData();
        const sheetDataArr = sheetsData.splice(index, 1);
        if (to < 0)
            to = 0;
        if (to > this._sheets.length - 1)
            to = this._sheets.length - 1;
        sheetsData.splice(to, 0, ...sheetDataArr);
        this._sheets.splice(index, 1);
        this._sheets.splice(to, 0, sheet);
        this.getUndo().add({
            undo: () => this.moveSheetTo(sheetId, index),
            redo: () => this.moveSheetTo(sheetId, to)
        });
        this.emit(constants_1.EVENTS.AFTER_SHEET_ORDER_CHANGE);
        this.emit(constants_1.EVENTS.AFTER_WORKBOOK_CONTENT_CHANGE);
    }
    getSheets() {
        return [...this._sheets];
    }
    getSheetByIndex(index) {
        return this._sheets[index];
    }
    getSheetById(sheetId) {
        return this._sheets.find(sheet => sheet.getId() === sheetId);
    }
    findSheetIndex(sheetId) {
        return this._sheets.findIndex(sheet => sheet.getId() === sheetId);
    }
    getUndo() {
        return this._undoManager;
    }
    createEmptySheet(sheetTitle = '', rootTopicTitle = '') {
        const newSheetData = {
            id: utils_1.UUID(),
            title: sheetTitle,
            rootTopic: {
                id: utils_1.UUID(),
                title: rootTopicTitle
            }
        };
        return this.addSheet(newSheetData);
    }
}
exports.default = Workbook;
//# sourceMappingURL=workbook.js.map