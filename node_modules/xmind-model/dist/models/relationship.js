"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../common/constants");
const style_component_1 = require("./style-component");
const utils_1 = require("../common/utils");
const GET = 'get';
const SET = 'set';
const TITLE_KEY = 'title';
const END_1_ID_KEY = 'end1Id';
const END_2_ID_KEY = 'end2Id';
const CONTROL_POINTS_KEY = 'controlPoints';
const EVENT_TITLE = 'change:title';
const EVENT_END_POINT = 'change:endPoints';
const EVENT_CONTROL_POINTS = 'change:controlPoints';
class Relationship extends style_component_1.default {
    constructor() {
        super(...arguments);
        this.componentType = constants_1.COMPONENT_TYPE.RELATIONSHIP;
    }
    getTitle() {
        return this._data.commit(GET, TITLE_KEY);
    }
    changeTitle(title) {
        let oldTitle = this.getTitle();
        if (oldTitle === title) {
            return;
        }
        this._data.commit(SET, TITLE_KEY, title);
        this.triggerModelChanged(EVENT_TITLE);
        this.getUndo().add({
            undo: () => this.changeTitle(oldTitle),
            redo: () => this.changeTitle(title)
        }, 'R-changeTitle');
    }
    getEnd1Id() {
        return this._data.commit(GET, END_1_ID_KEY);
    }
    getEnd2Id() {
        return this._data.commit(GET, END_2_ID_KEY);
    }
    changeEndPoints(newEndIds) {
        const oldEndIds = {
            end1Id: this.getEnd1Id(),
            end2Id: this.getEnd2Id(),
        };
        // check change
        if ((oldEndIds.end1Id === newEndIds.end1Id) &&
            (oldEndIds.end2Id === newEndIds.end2Id))
            return;
        if (newEndIds.end1Id && newEndIds.end1Id !== oldEndIds.end1Id) {
            this._data.commit(SET, END_1_ID_KEY, newEndIds.end1Id);
        }
        if (newEndIds.end2Id && newEndIds.end2Id !== oldEndIds.end2Id) {
            this._data.commit(SET, END_2_ID_KEY, newEndIds.end2Id);
        }
        this.triggerModelChanged(EVENT_END_POINT);
        this.getUndo().add({
            undo: () => { this.changeEndPoints(oldEndIds); },
            redo: () => { this.changeEndPoints(newEndIds); }
        }, 'R-changeEndPoints');
    }
    getControlPoint0() {
        return this._data.commit(GET, CONTROL_POINTS_KEY)['0'];
    }
    getControlPoint1() {
        return this._data.commit(GET, CONTROL_POINTS_KEY)['1'];
    }
    changeControlPoints(points) {
        if (!points || Object.keys(points).length === 0) {
            return;
        }
        // control point type has two patten
        // { x: number, y: number } or { amount: number, angle: number }
        // we only us the first patten now
        const controlPointsData = this._data.commit(GET, CONTROL_POINTS_KEY) || {};
        const oldPoints = Object.assign({}, controlPointsData);
        const hasPoint0Changed = points['0'] ? !utils_1.isEqualPoint(points['0'], oldPoints['0']) : false;
        const hasPoint1Changed = points['1'] ? !utils_1.isEqualPoint(points['1'], oldPoints['1']) : false;
        if (!hasPoint0Changed && !hasPoint1Changed)
            return;
        const newPoints = Object.assign({}, oldPoints, points);
        this._data.commit(SET, CONTROL_POINTS_KEY, newPoints);
        this.triggerModelChanged(EVENT_CONTROL_POINTS);
        this.getUndo().add({
            undo: () => { this.changeControlPoints(oldPoints); },
            redo: () => { this.changeControlPoints(newPoints); }
        }, 'R-changeControlPoints');
    }
}
exports.default = Relationship;
//# sourceMappingURL=relationship.js.map