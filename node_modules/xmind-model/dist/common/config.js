"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./constants/index");
const utils_1 = require("./utils");
const defaultConfigData = {
    [index_1.CONFIG.XAP_LOADER]: () => {
        return Promise.resolve('');
    },
    [index_1.CONFIG.URL_PREFIX]: '',
    [index_1.CONFIG.FONT_URL_PREFIX]: '',
    // [CONFIG.FONT_FACE_GENERATOR]: fontFamily => {
    //   return new Promise((resolve) => {
    //     let fontFace = embeddedFonts[fontFamily]
    //     resolve(fontFace ? [fontFace] : [])
    //   })
    // },
    [index_1.CONFIG.LANGUAGE]: index_1.LANGS.EN_US,
    [index_1.CONFIG.MAX_SCALE]: Infinity,
    [index_1.CONFIG.MIN_SCALE]: 0,
    [index_1.CONFIG.NO_KEYBIND]: false,
    [index_1.CONFIG.KEYBINDING_SERVICE]: function getCommand(keyCode, modifier) {
        return null;
    },
    [index_1.CONFIG.NO_EDIT_RECEIVER]: false,
    [index_1.CONFIG.READONLY]: false,
    [index_1.CONFIG.HIDE_COLLAPSE_BTN]: true,
    [index_1.CONFIG.NO_TOPIC_CUSTOM_WIDTH_BTN]: true,
    [index_1.CONFIG.INFO_ITEM_STYLE]: index_1.INFO_ITEM_STYLE_TYPE.FASHION,
    [index_1.CONFIG.CLIPBOARD_READER]: function () {
        return null;
    },
    // [CONFIG.DEFERED_EVENTS]: [
    //   EVENTS.UNDO_STATE_CHANGE,
    //   EVENTS.AFTER_ADD_TOPIC,
    //   EVENTS.AFTER_REMOVE_TOPIC,
    //   EVENTS.SELECTION_CHANGED,
    //   EVENTS.SCALE_CHANGED
    // ],
    [index_1.CONFIG.PADDING_FACTOR]: 1,
    // [CONFIG.DEFERED_TIME]: 250,
    [index_1.CONFIG.FAKE_IMAGE]: false,
    [index_1.CONFIG.LOGGER]: {
        /*eslint-disable no-console*/
        info: process.env.NODE_ENV === 'development' ? console.info.bind(console) : op,
        warn: process.env.NODE_ENV === 'development' ? console.warn.bind(console) : op,
        error: process.env.NODE_ENV === 'development' ? console.error.bind(console) : op,
        debug: process.env.NODE_ENV === 'development' ? console.debug.bind(console) : op,
    },
    [index_1.CONFIG.INPUT_HANDLER]: function (e) {
        return Promise.resolve('');
    },
    /// true: continue to do other things
    /// false: stop
    [index_1.CONFIG.LIMITED_OPERATION_HANDLER]: function (operation) {
        return Promise.resolve(true); //SUPPORTED_LIMITED_OPERATIONS.includes(operation) ? Promise.resolve(false) : Promise.resolve(true)
    },
    [index_1.CONFIG.AUTO_ACTION_STATUS]: false,
};
function op() { }
class Config {
    constructor(configData = {}) {
        this.data = Object.assign({}, configData);
    }
    parent(parentConfigInstance) {
        if (parentConfigInstance instanceof Config) {
            this._parent = parentConfigInstance;
        }
        return this._parent || (this !== exports.defaultConfig ? exports.defaultConfig : null);
    }
    get(key) {
        let value = this.data[key];
        if (utils_1.isUndefined(value)) {
            let p = this.parent();
            value = p && p.get(key);
        }
        return value;
    }
    set(...args) {
        if (utils_1.isObject(args[0])) {
            let d = args[0];
            for (let attr in d) {
                this.set(attr, d[attr]);
            }
        }
        else if (args.length === 2) {
            let key = args[0];
            let value = args[1];
            this.data[key] = value;
        }
        else {
            this.get(index_1.CONFIG.LOGGER).error('Illegal arguments for Config: ', args);
        }
    }
}
exports.Config = Config;
exports.defaultConfig = new Config(defaultConfigData);
//# sourceMappingURL=config.js.map