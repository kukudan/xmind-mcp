"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Is a given variable undefined?
exports.isUndefined = function (obj) {
    return obj === void 0;
};
// Is a given value equal to null?
exports.isNull = function (obj) {
    return obj === null;
};
exports.isObject = function (obj) {
    const type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
};
exports.isEmpty = function (obj) {
    if (obj === '')
        return true;
    if (obj == null)
        return true;
    if (exports.isObject(obj) && Object.keys(obj).length <= 0)
        return true;
    if (Array.isArray(obj) && obj.length <= 0)
        return true;
    return false;
};
if (!Array.isArray) {
    Array.isArray = function (arg) {
        return Object.prototype.toString.call(arg) === '[object Array]';
    };
}
exports.isArray = function (obj) {
    return Array.isArray(obj);
};
// Is a given value a boolean?
exports.isBoolean = function (obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
};
exports.isArguments = function (obj) {
    return toString.call(obj) === '[object Arguments]';
};
exports.isFunction = function (obj) {
    return toString.call(obj) === '[object Function]';
};
exports.isString = function (obj) {
    return toString.call(obj) === '[object String]';
};
exports.isNumber = function (obj) {
    return toString.call(obj) === '[object Number]';
};
exports.isDate = function (obj) {
    return toString.call(obj) === '[object Date]';
};
exports.isRegExp = function (obj) {
    return toString.call(obj) === '[object RegExp]';
};
exports.isError = function (obj) {
    return toString.call(obj) === '[object Error]';
};
exports.isNaN = function (obj) {
    return exports.isNumber(obj) && obj !== +obj;
};
exports.subtract = function (a, b) {
    let result = {};
    for (let k of Object.keys(b)) {
        if (a[k] !== b[k]) {
            result[k] = b[k];
        }
    }
    return result;
};
if (!Object.is) {
    Object.is = function (x, y) {
        // SameValue algorithm
        if (x === y) { // Steps 1-5, 7-10
            // Steps 6.b-6.e: +0 != -0
            return x !== 0 || 1 / x === 1 / y;
        }
        else {
            // Step 6.a: NaN == NaN
            return x !== x && y !== y;
        }
    };
}
exports.isEqual = function (a, b) {
    return Object.is(a, b);
};
exports.clone = function (obj) {
    if (exports.isObject(obj))
        return obj;
    return Array.isArray(obj) ? obj.slice() : Object.assign({}, obj);
};
exports.deepClone = function (obj) {
    let cloned = exports.clone(obj);
    Object.keys(cloned).forEach(key => {
        let value = cloned[key];
        if (exports.isObject(value)) {
            cloned[key] = exports.deepClone(value);
        }
    });
    return cloned;
};
//# sourceMappingURL=syntax.js.map